# A more complex example showing switching on type
# and suggesting how the compiler verifies these checks
# before allowing unboxing of Union types

# defaults to Empty
let m::Maybe<Int>

if ...
    m = 32
end

if ...
    m = 16
end

match m
    case Int
        print("Got number ", m.contents)
    case Empty
        print("Got nothing")
end

union Container
    i::Int
    s::String
    f::Foo
end

fn bar(&c::Container)
    # unwrap Container and perform action based on type
    # compiler to enforce that *all* possible types are handled
    # compiler also enforces that any 'unwrapping' is safe
    match c
        case Int
            # can only unwrap c.i as we know we must be an Int
            &c.i += 14
        case String
            # can only unwrap c.s as we know we must be a String
            print(c.s)
        case Foo
            # can only unwrap c.f as we know we must be a Foo
            do-something-with-foo(c.f)
    end
end

