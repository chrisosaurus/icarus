# A more complex example showing switching on type
# and suggesting how the compiler verifies these checks
# before allowing unboxing of Union types

# defaults to Empty
let m::Maybe[Sint]

if ...
    m = 32s
end

if ...
    m = 16s
end

match m
    case Sint
        print("Got number ", m.contents)
    case Empty
        print("Got nothing")
end

union Container
    &i::Sint
    s::String
    f::Foo
end

fn bar(&c::Container)
    # unwrap Container and perform action based on type
    # compiler to enforce that *all* possible types are handled
    # compiler also enforces that any 'unwrapping' is safe
    match &c
        case &i::Sint
            # can only unwrap c.i as we know we must be an Sint
            &i += 14s
        case s::String
            # can only unwrap c.s as we know we must be a String
            print(s)
        case f::Foo
            # can only unwrap c.f as we know we must be a Foo
            do-something-with-foo(f)
    end
end

