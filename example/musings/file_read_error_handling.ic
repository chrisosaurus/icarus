
# a simple example representing reading a file into a vector

type Line
  number::Sint
  content::String
end

# this will require a lot of blocks that are of the form
#
#    let &f::File = match File(file_name)
#        case OK(x)
#            yield x
#        case Err(x)
#            return Err(x)
#    end
#
# we may want to introduce a shorthand / macro that is equivalent
#
#   let &f::File = unwrap File(file_name)
#
#   this has to be syntax/macro as it may return from the current scope


fn read_file(file_name::String) -> Result<Vector<Line>>
    let &v = Vector<Line>()

    let &f::File = match File(file_name)
        case OK(x)
            yield x
        case Err(x)
            return Err(x)
    end

    for (line, count) in enumerate(&f)
        append(&v, Line(count line))
    end

    # box our Vector up as a success and return
    # note we are boxing up an immutable reference
    return OK(v)
end

fn main(file_name::String)
    let results = match read_file(file_name)
        case Err(x)
            return Err(x)
        case Ok(x)
            yield x
    end

    for line in results
        print(line.number, " : ", line.contents)
    end

end

