
# a simple example representing reading a file into a vector

type Line
  number::Signed
  content::String
end

# this will require a lot of blocks that are of the form
#
#    let &f::File = match File(file_name)
#        case value::File
#            yield value
#        case error::Err
#            return error
#    end
#
# we may want to introduce a shorthand / macro that is equivalent
#
#   let &f::File = unwrap File(file_name)
#
#   this has to be syntax/macro as it may return from the current scope

builtin fn open(file_name::String) -> Result<File>

fn read_file(file_name::String) -> Result[Vector[Line]]
    let &v = Vector[Line]()

    let &f::File = match open(file_name)
        case value::File
            yield value
        case error:Err
            return error
    end

    for (contents, count) in enumerate(f)
        append(&v, Line(count, contents))
    end

    # box our Vector up as a success and return
    # note we are boxing up an immutable reference
    return OK(v)
end

fn main(file_name::String)
    let results = match read_file(file_name)
        case value::Vector[Line]
            yield value
        case error::Err
            return error
    end

    for line in results
        print(line.number, " : ", line.contents)
    end

end

