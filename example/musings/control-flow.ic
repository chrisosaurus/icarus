
fn main()

    if expr
        body
    elsif expr
        # FIXME need to decide on elseif/elif/whatever
        # would rather keep it a single token (so avoiding 'else if')
        body
    else
        body
    end

    # sugar for if/elsif/else
    # FIXME need to have a keyword before each case (is 'test' okay?)
    # OR have an end block between them, which I think is worse
    cond
        test expr
            body
        test expr
            body
        test expr
            body
        else
            body
    end

    # testing on value
    # no default fallthrough (implicit 'break')
    # do we want to allow an explicit fallthrough? ('fallthrough' / 'next' ?)
    switch expr
        case expr
            body
        case expr
            body
        case expr
            body
        else
            body
    end

    # testing on type
    # do we need a keyword before each type?
    match expr
        TypeA a
            body
        TypeB b
            body
        TypeC c
            body
        else
            body
    end


    for item in iterator
        body
    end

    for (index, item) in enumerate(iterator)
        body
    end

    for index in [0..10]
        body
    end

    # FIXME do we want a more 'traditional' for?
    # in the above for loops is it safe for the body to modify the iterator?
    #   default answer = no
    # in this below for loop it must be safe to modify i in the body
    for i=0; i<10; ++i
        body
    end


    # currently an expr in a while MUST result to a boolean
    # and currently assignments do NOT return a value
    # so this makes the icarus 'while' weaker than other language's
    # whiles
    while expr
        body
    end


    # FIXME is a do while block needed?
    do
        body
    while expr

end

