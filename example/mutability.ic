# syntax and semantics still in the works

# largely inspired by:
#   c (pointer vs pointee difference)
#   c# (`out` is the biggest influence here)
#   rust (default immutability)

# the goals here are:
#    to have mutability visible at the call site
#    to have mutability visible at the interface level (function declaration)

type Foo
  a::Int
end

# function bar takes a mutable reference to a Foo
function bar(&f::Foo)
  f.a = 14
end

# function bar takes a mutable reference to an Int
function bar(&a::Int)
  a = 14
end

# function bar takes an immutable string reference
function bar(s::String)
    s.append(" world") # compile time error, trying to mutate through an immutable reference
end

function main()
  let x::Foo = Foo(0)

  # one - function can mutate x
  bar(&x)

  # two - function can mutate x.a
  bar(&x.a)

  # three - ERROR cannot pass constant as mutable ref
  bar(14)

  # ERROR passing an immutable reference, function wants mutable
  bar(x.a)


  let i::Int = 0;

  # four - function can mutate i
  bar(&i)

  # five - no error here as we are correctly respecting the contract
  # however function bar(String) will not compile as it is trying
  # to mutate through an immutable reference
  bar("hello")

end

