
type Zero
end

union Succ
    zero::Zero
    succ::Succ
end

fn value(_::Zero) -> Uint
    return 0u
end

fn value(s::Succ) -> Uint
    match s
        case zero::Zero
            return 1u + 0u
        case succ::Succ
            return 1u + value(succ)
        end
    end
end

fn print(s::Succ)
    let v = value(s)
    print(v)
end

fn print(z::Zero)
    let v = value(z)
    print(v)
end

fn plus(a::Zero, _::Zero) -> Zero
    return a
end

fn plus(_::Zero, b::Succ) -> Succ
    return b
end

fn plus(a::Succ, _::Zero) -> Succ
    return a
end

fn plus(a::Succ, b::Succ) -> Succ
    match a
        case succ::Succ
            return Succ(succ + b)
        case zero::Zero
            return Succ(b)
        end
    end
end

fn main()
    let three = Succ(Succ(Succ(Zero())))
    let two = Succ(Succ(Zero()))
    let five = three + two
    println(five)
end

