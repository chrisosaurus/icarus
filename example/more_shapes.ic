fn max(a::Unsigned, b::Unsigned) -> Unsigned
    if a < b
        return b
    else
        return a
    end
end

fn min(a::Unsigned, b::Unsigned) -> Unsigned
    if a > b
        return b
    else
        return a
    end
end

type Point
    x::Unsigned
    y::Unsigned
end

type Square
    topleft::Point
    width::Unsigned
end

fn area(s::Square) -> Unsigned
    return s.width * s.width
end

type Rectangle
    topleft::Point
    bottomright::Point
end

fn area(r::Rectangle) -> Unsigned
    let dy = max(r.topleft.y, r.bottomright.y) - min(r.topleft.y, r.bottomright.y)
    let dx = max(r.topleft.x, r.bottomright.x) - min(r.topleft.x, r.bottomright.x)
    return dy * dx
end

type Circle
    center::Point
    radius::Unsigned
end

fn area(c::Circle) -> Unsigned
    let not_quite_pi = 3u
    return not_quite_pi * c.radius * c.radius
end

union Shape
    circle::Circle
    square::Square
    rectangle::Rectangle
end

fn area(s::Shape) -> Unsigned
    match s
        case circle::Circle
            return area(circle)
        case square::Square
            return area(square)
        case rectangle::Rectangle
            return area(rectangle)
        end
    end
end

fn generate_shape() -> Shape
    return Shape(Rectangle(Point(14u, 10u), Point(20u, 24u)))
end

fn main()
    let s = generate_shape()
    println(s)

    let a = area(s)
    let expected = multiply(minus(20u,14u), minus(24u,10u))

    if a == expected
        println("PASS")
    else
        println("FAIL:")
    end

    print("  Expected: ")
    println(expected)
    print("  Got: ")
    println(a)
end

