import Math::abs
import Math::random

# naive translation of https://github.com/mkfifo/atomos-ng
# into https://github.com/mkfifo/icarus


const N_GAS = 2u


type Cell
    # a count of the number of each
    # gas in this cell
    gas_counts :: Array[Uint N_GAS]
end

fn init( &cells :: Array[Cell, xd, yd, zd] ) -> Uint
    const xm, ym, zm = xd/2u, yd/2u, zd/2u

    let quan :: Uint = 0u
    let quan_tot :: Uint = 0u

    for z in 0u..zd
        for y in 0u..yd
            for x in 0u..xd
                let &c = cells[x, y, z]

                quan = Math::abs(xm - x) + Math::abs(ym - y) + Math::abs(zm - z)
                quan_tot += quan

                &c.gas_counts[0u] = quan
                &c.gas_counts[1u] = quan
            end # for x
        end # for y
    end # for z

    return quan_tot
end


fn tick( &cells :: Array[Cell, xd, yd, zd] )

    for z in 0..zd
        for y in 0..yd
            for x in 0..xd

                let &ca = cells[x, y, z]

                # consider swap with x pos neigh
                if cells.contains(x+1u, y, z)
                    let &cb = cells[x+1u, y, z]
                    let ra, rb = Math::random(N_GAS), Math::random(N_GAS)

                    if ca.gas_counts[ra]
                        &ca.gas_counts[ra]--
                        &cb.gas_counts[ra]++
                    end

                    if cb.gas_counts[rb]
                        &ca.gas_counts[rb]++
                        &cb.gas_counts[rb]--
                    end
                end

                # consider swap with y pos neigh
                if cells.contains(x, y+1u, z)
                    let &cb = cells[x, y+1u, z]
                    let ra, rb = Math::random(N_GAS), Math::random(N_GAS)

                    if ca.gas_counts[ra]
                        &ca.gas_counts[ra]--
                        &cb.gas_counts[ra]++
                    end

                    if cb.gas_counts[rb]
                        &ca.gas_counts[rb]++
                        &cb.gas_counts[rb]--
                    end
                end

                # consider swap with z pos neigh
                if cells.contains(x, y, z+1u)
                    let &cb = cells[x, y, z+1u]
                    let ra, rb = Math::random(N_GAS), Math::random(N_GAS)

                    if ca.gas_counts[ra]
                        &ca.gas_counts[ra]--
                        &cb.gas_counts[ra]++
                    end

                    if cb.gas_counts[rb]
                        &ca.gas_counts[rb]++
                        &cb.gas_counts[rb]--
                    end
                end

            end # for x
        end # for y
    end # for z

end # fn tick


fn main()
    const xd, yd, zd = 128u, 128u, 128u
    const nticks = 1000u

    let &cells = Array[Cell, xd, yd, zd]

    const quan_tot = init(&cells)

    for 0u .. nticks
        tick(&cells)
    end

    printf("Finished simulation of {} particles in a {} * {} * {} volume for {} ticks\n",
            quan_tot, xd, yd, zd, nticks )

end

