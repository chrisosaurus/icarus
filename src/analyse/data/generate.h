#ifndef ICARUS_GENERATE_H
#define ICARUS_GENERATE_H

#include "../../parse/data/decl.h"
#include "../../parse/data/field.h"

/* the ic_generate type is created for every function we want to be generated
 * many of these will be generated by the backend (such as constructors),
 * some may be generated within icarus itself
 *
 * FIXME TODO how do we differentiate between these two?
 *  print can be expressed in icarus
 *  cons cannot
 *
 */

enum ic_generate_tag {
    ic_generate_tag_cons_struct,
    ic_generate_tag_cons_union,
    ic_generate_tag_print,
    /* FIXME TODO once we have generics we can replace println with
     *  fn println[T](t::T)
     *      print(t)
     *      println()
     *  end
     */
    ic_generate_tag_println,
};

struct ic_generate {
    enum ic_generate_tag tag;
    /* the fdecl created to represent this function
     * currently a blank (with name set, but no body)
     */
    struct ic_decl_func *fdecl;
    /* the type that triggered this generation */
    struct ic_decl_type *tdecl;
    /* fields only used by subset of generate_tag */
    union {
        struct ic_field *union_field;
    } u;
};

/* allocate and initalise a new ic_generate
 *
 * returns * on success
 * returns 0 on failure
 */
struct ic_generate *ic_generate_new(enum ic_generate_tag tag, struct ic_decl_func *fdecl, struct ic_decl_type *tdecl);

/* initialise an existing ic_generate
 *
 * returns 1 on success
 * returns 0 on failure
 */
unsigned int ic_generate_init(struct ic_generate *gen, enum ic_generate_tag tag, struct ic_decl_func *fdecl, struct ic_decl_type *tdecl);

/* destroy an ic_generate
 *
 * will only free gen is `free_gen` is truthy
 *
 * will free fdecl if set
 * will not free other fields (as they are not owned)
 *
 * returns 1 on success
 * returns 0 on failure
 */
unsigned int ic_generate_destroy(struct ic_generate *gen, unsigned int free_gen);

/* get fdecl field
 *
 * returns * on success
 * returns 0 on failure
 */
struct ic_decl_func *ic_generate_get_fdecl(struct ic_generate *gen);

/* get tdecl field
 *
 * returns * on success
 * returns 0 on failure
 */
struct ic_decl_type *ic_generate_get_tdecl(struct ic_generate *gen);

/* get union_field
 *
 * only legal if tag is cons_union
 *
 * returns * on success
 * returns 0 on failure
 */

struct ic_field *ic_generate_get_union_field(struct ic_generate *gen);

/* set union_field
 *
 * only legal if tag is cons_union
 * only legal if union_field not already set
 *
 * returns 1 on success
 * returns 0 on failure
 */

unsigned int ic_generate_set_union_field(struct ic_generate *gen, struct ic_field *union_field);

#endif // ICARUS_GENERATE_H
