builtin fn println()

builtin type Unit
builtin fn Unit() -> Unit
builtin fn print(a::Unit)
builtin fn println(a::Unit)
builtin fn equal(a::Unit, b::Unit) -> Bool
builtin fn to_str(a::Unit) -> String

builtin type Bool
builtin fn print(a::Bool)
builtin fn println(a::Bool)
builtin fn equal(a::Bool, b::Bool) -> Bool
builtin fn not(a::Bool) -> Bool
builtin fn and(a::Bool, b::Bool) -> Bool
builtin fn or(a::Bool, b::Bool) -> Bool
builtin fn to_str(a::Bool) -> String
builtin fn assert(a::Bool) -> Unit

builtin type Signed
builtin fn print(a::Signed)
builtin fn println(a::Signed)
builtin fn equal(a::Signed, b::Signed) -> Bool
builtin fn plus(a::Signed, b::Signed) -> Signed
builtin fn minus(a::Signed, b::Signed) -> Signed
builtin fn multiply(a::Signed, b::Signed) -> Signed
builtin fn divide(a::Signed, b::Signed) -> Signed
builtin fn modulo(a::Signed, b::Signed) -> Signed
builtin fn lessthan_equal(a::Signed, b::Signed) -> Bool
builtin fn greaterthan_equal(a::Signed, b::Signed) -> Bool
builtin fn greaterthan(a::Signed, b::Signed) -> Bool
builtin fn lessthan(a::Signed, b::Signed) -> Bool

builtin type Unsigned
builtin fn print(a::Unsigned)
builtin fn println(a::Unsigned)
builtin fn equal(a::Unsigned, b::Unsigned) -> Bool
builtin fn plus(a::Unsigned, b::Unsigned) -> Unsigned
builtin fn minus(a::Unsigned, b::Unsigned) -> Unsigned
builtin fn multiply(a::Unsigned, b::Unsigned) -> Unsigned
builtin fn divide(a::Unsigned, b::Unsigned) -> Unsigned
builtin fn modulo(a::Unsigned, b::Unsigned) -> Unsigned
builtin fn lessthan_equal(a::Unsigned, b::Unsigned) -> Bool
builtin fn greaterthan_equal(a::Unsigned, b::Unsigned) -> Bool
builtin fn greaterthan(a::Unsigned, b::Unsigned) -> Bool
builtin fn lessthan(a::Unsigned, b::Unsigned) -> Bool

# FIXME TODO these may be less needed once we have
# fixed the outstanding 'bug' around literal behavior
builtin fn equal(a::Unsigned, b::Signed) -> Bool
builtin fn equal(a::Signed, b::Unsigned) -> Bool

builtin type String
builtin fn print(a::String)
builtin fn println(a::String)
builtin fn equal(a::String, b::String) -> Bool
builtin fn concat(a::String, b::String) -> String
# FIXME - commenting out for now to avoid confusion in compiled output
# we probably want a way to express that `plus` is an alias for `concat`
# here we use `concat` as the primitive and `plus` as the alias
# as `concat` is more descriptive
# fn plus(a::String, b::String) -> String return concat(a, b) end
builtin fn length(a::String) -> Unsigned

builtin op + plus
builtin op - minus
builtin op * multiply
builtin op / divide
builtin op % modulo
builtin op == equal
builtin op and and
builtin op or or
builtin op <= lessthan_equal
builtin op >= greaterthan_equal
builtin op < lessthan
builtin op > greaterthan

