builtin fn println()

builtin type Void

builtin type Bool
builtin fn print(a::Bool)
builtin fn println(a::Bool)
builtin fn equal(a::Bool, b::Bool) -> Bool
builtin fn not(a::Bool) -> Bool
builtin fn and(a::Bool, b::Bool) -> Bool
builtin fn or(a::Bool, b::Bool) -> Bool
builtin fn to_str(a::Bool) -> String

builtin type Sint
builtin fn print(a::Sint)
builtin fn println(a::Sint)
builtin fn equal(a::Sint, b::Sint) -> Bool
builtin fn plus(a::Sint, b::Sint) -> Sint
builtin fn minus(a::Sint, b::Sint) -> Sint
builtin fn multiply(a::Sint, b::Sint) -> Sint
builtin fn divide(a::Sint, b::Sint) -> Sint
builtin fn modulo(a::Sint, b::Sint) -> Sint
builtin fn lessthan_equal(a::Sint, b::Sint) -> Bool
builtin fn greaterthan_equal(a::Sint, b::Sint) -> Bool
builtin fn greaterthan(a::Sint, b::Sint) -> Bool
builtin fn lessthan(a::Sint, b::Sint) -> Bool

builtin type Uint
builtin fn print(a::Uint)
builtin fn println(a::Uint)
builtin fn equal(a::Uint, b::Uint) -> Bool
builtin fn plus(a::Uint, b::Uint) -> Uint
builtin fn minus(a::Uint, b::Uint) -> Uint
builtin fn multiply(a::Uint, b::Uint) -> Uint
builtin fn divide(a::Uint, b::Uint) -> Uint
builtin fn modulo(a::Uint, b::Uint) -> Uint
builtin fn lessthan_equal(a::Uint, b::Uint) -> Bool
builtin fn greaterthan_equal(a::Uint, b::Uint) -> Bool
builtin fn greaterthan(a::Uint, b::Uint) -> Bool
builtin fn lessthan(a::Uint, b::Uint) -> Bool

# FIXME TODO these may be less needed once we have
# fixed the outstanding 'bug' around literal behavior
builtin fn equal(a::Uint, b::Sint) -> Bool
builtin fn equal(a::Sint, b::Uint) -> Bool

builtin type String
builtin fn print(a::String)
builtin fn println(a::String)
builtin fn equal(a::String, b::String) -> Bool
builtin fn concat(a::String, b::String) -> String
# FIXME - commenting out for now to avoid confusion in compiled output
# we probably want a way to express that `plus` is an alias for `concat`
# here we use `concat` as the primitive and `plus` as the alias
# as `concat` is more descriptive
# fn plus(a::String, b::String) -> String return concat(a, b) end
builtin fn length(a::String) -> Uint

builtin op + plus
builtin op - minus
builtin op * times
builtin op / divide
builtin op % modulo
builtin op == equal
builtin op and and
builtin op or or
builtin op <= lessthan_equal
builtin op >= greaterthan_equal
builtin op < lessthan
builtin op > greaterthan

