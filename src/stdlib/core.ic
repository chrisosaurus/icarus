builtin type Void

builtin type Bool
builtin fn print(a::Bool)
builtin fn equal(a::Bool, b::Bool) -> Bool
builtin fn not(a::Bool) -> Bool
builtin fn and(a::Bool, b::Bool) -> Bool
builtin fn or(a::Bool, b::Bool) -> Bool

builtin type Int
builtin fn print(a::Int)
builtin fn equal(a::Int, b::Int) -> Bool
builtin fn plus(a::Int, b::Int) -> Int
builtin fn minus(a::Int, b::Int) -> Int
builtin fn multiply(a::Int, b::Int) -> Int
builtin fn divide(a::Int, b::Int) -> Int
builtin fn modulo(a::Int, b::Int) -> Int

builtin type String
builtin fn print(a::String)
builtin fn equal(a::String, b::String) -> Bool
builtin fn concat(a::String, b::String) -> String
# we probably want a way to express that `plus` is an alias for `concat`
# here we use `concat` as the primitive and `plus` as the alias
# as `concat` is more descriptive
fn plus(a::String, b::String) -> String return concat(a, b) end

builtin op + plus
builtin op - minus
builtin op * times
builtin op / divide
builtin op % modulo
builtin op == equal
builtin op && and
builtin op || or

