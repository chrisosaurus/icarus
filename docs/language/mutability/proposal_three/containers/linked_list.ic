# an attempt to write some containers under prop. 3
# default frozen
# $a immut ref
# %a storable immut ref
# &a mut ref
# @a storable mut ref

type LinkedList<T>
    @node::maybe<LNode<T>>
end

type LNode<T>
    &val::T
    &next::Maybe<LNode<T>>
end

fn prepend<T>(&l::LinkeList<T>, @v::T)
    let @n = LNode<T>(@v, &l.node)
    &l.node = @n
end

fn head<T>(&l::LinkeList<T>) -> &Maybe<T>
    return &l.node;
end

fn pop<T>(&l::LinkeList<T>) -> &Maybe<T>
    let &n = &l.node;

    match &n
        Something &x
            &l.node = &x.next
        Nothing
    end

    return &n
end

fn get<T>(&l::LinkeList<T>, i::Sint) -> &Maybe<Sint>
    let &n = &l.node

    if i<= 1
        return &n
    end

    for i in 1..(i-1)
        match &n
            Something &x
                &n = &x.next
            Nothing
                return Nothing
        end
    end

    return &n
end

fn mystery(&list::LinkedList<Sint>)
    for &i in &list
        &i += 1
    end
end

fn main()
    let ll = LinkedList<Sint>(Nothing)
    let x = 14
    let y = 21

    &ll.prepend(@x)
    &ll.prepend(@y)

    mystery(&l)

    # this will output
    # 15
    # 22
    println(x)
    println(y)
end

fn println<T>(x::T)
    print(x)
    print("\n")
end

